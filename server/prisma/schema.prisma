// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())

  decks       Deck[]
  progress    Progress[]
  favorites   FavoriteDeck[]
}

model Deck {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  name        String
  description String?
  createdAt   DateTime @default(now())

  flashcards  Flashcard[]
  favorites   FavoriteDeck[]
}

model Flashcard {
  id         Int      @id @default(autoincrement())
  deck       Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId     Int
  term       String
  definition String
  createdAt  DateTime @default(now())

  progress   Progress[]
}

model FavoriteDeck {
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  deck     Deck @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId   Int
  createdAt DateTime @default(now())

  @@id([userId, deckId])
}

model Progress {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  flashcard    Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  flashcardId  Int
  lastReviewed DateTime  @default(now())
  reviewCount  Int       @default(0)
  successCount Int       @default(0)
  failCount    Int       @default(0)
  createdAt    DateTime  @default(now())
}